{"version":3,"sources":["Components/Statistics/FeedbackOptions.js","Components/Layout/Layout.js","Components/Statistics/Statistics.js","Components/Section.js","Components/Notification.js","Components/App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","type","onClick","Layout","children","className","Statistics","good","neutral","bad","total","positivePercentage","toFixed","Section","title","Notification","message","App","state","handlePoints","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","this","positiveFeedback","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAEe,SAASA,EAAT,GAGX,IAAD,IAFDC,eAEC,MAFS,CAAC,OAAQ,UAAW,OAE7B,EADDC,EACC,EADDA,gBAEA,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAQA,KAAK,SAASC,QAAS,kBAAMH,EAAgBE,IAArD,SACGA,S,UCLIE,EAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKC,UAAU,SAAf,SAAyBD,KCQ3C,SAASE,EAAT,GAMJ,IALTC,EAKQ,EALRA,KACAC,EAIQ,EAJRA,QACAC,EAGQ,EAHRA,IACAC,EAEQ,EAFRA,MACAC,EACQ,EADRA,mBAEA,OACE,sBAAKN,UAAU,mBAAf,UACE,yCAAYE,KACZ,4CAAeC,KACf,wCAAWC,KAEX,0CAAaC,KACb,sDAAyBH,GAAQI,EAAmBC,UAApD,UClBS,SAASC,EAAT,GAA8C,IAA3BT,EAA0B,EAA1BA,SAAUU,EAAgB,EAAhBA,MAC1C,OACE,qCACE,6BAAKA,IACJV,KCTQ,SAASW,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,I,ICgECC,E,4MArDbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,aAAe,SAAClB,GACd,EAAKmB,UAAS,SAACC,GAAD,sBAAmBpB,EAAOoB,EAAUpB,GAAQ,O,EAG5DqB,mBAAqB,kBACnB,EAAKJ,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAEpDc,gCAAkC,kBACb,IAAlB,EAAKL,MAAMX,KAAc,EAAKe,sB,uDAG/B,IAAMZ,EAAQc,KAAKF,qBACbG,EAAmBD,KAAKD,kCAE9B,OACE,cAAC,EAAD,UACE,qCACE,8BACE,cAACV,EAAD,CAASC,MAAM,wBAAf,SACE,cAACjB,EAAD,CACEC,QAAS4B,OAAOC,KAAKH,KAAKN,OAC1BnB,gBAAiByB,KAAKL,mBAK5B,8BACE,cAACN,EAAD,CAASC,MAAM,aAAf,SACGJ,EAAQ,EACP,cAACJ,EAAD,CACEC,KAAMiB,KAAKN,MAAMX,KACjBC,QAASgB,KAAKN,MAAMV,QACpBC,IAAKe,KAAKN,MAAMT,IAChBC,MAAOA,EACPC,mBAAoBc,IAGtB,cAACV,EAAD,CAAcC,QAAQ,mC,GA5CpBY,aCPlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f1e56fbf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FeedbackOptions({\r\n  options = [\"good\", \"neutral\", \"bad\"],\r\n  onLeaveFeedback,\r\n}) {\r\n  return (\r\n    <div>\r\n      {options.map((type) => (\r\n        <button type=\"button\" onClick={() => onLeaveFeedback(type)}>\r\n          {type}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Layout.css\";\r\n\r\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\ninterface Props {\r\n  good: number;\r\n  neutral: number;\r\n  bad: number;\r\n  total: number;\r\n  positivePercentage: number;\r\n}\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}: Props) {\r\n  return (\r\n    <div className=\"statisticsPoints\">\r\n      <div>Good: {good}</div>\r\n      <div>Neutral: {neutral}</div>\r\n      <div>Bad: {bad}</div>\r\n\r\n      <div>Total: {total}</div>\r\n      <div>Positive feedback: {good && positivePercentage.toFixed()}%</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  children: any;\r\n  title: string;\r\n}\r\n\r\nexport default function Section({ children, title }: Props) {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Notification({ message }) {\r\n  return <h2>{message}</h2>;\r\n}\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./Statistics/FeedbackOptions\";\nimport Layout from \"./Layout/Layout\";\nimport Statistics from \"./Statistics/Statistics\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\n\ninterface stateTypes {\n  good: number;\n  neutral: number;\n  bad: number;\n}\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handlePoints = (type) => {\n    this.setState((prevState) => ({ [type]: prevState[type] + 1 }));\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    (this.state.good * 100) / this.countTotalFeedback();\n\n  render() {\n    const total = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n\n    return (\n      <Layout>\n        <>\n          <div>\n            <Section title=\"Please leave feedback\">\n              <FeedbackOptions\n                options={Object.keys(this.state)}\n                onLeaveFeedback={this.handlePoints}\n              />\n            </Section>\n          </div>\n\n          <div>\n            <Section title=\"Statistics\">\n              {total > 0 ? (\n                <Statistics\n                  good={this.state.good}\n                  neutral={this.state.neutral}\n                  bad={this.state.bad}\n                  total={total}\n                  positivePercentage={positiveFeedback}\n                />\n              ) : (\n                <Notification message=\"No feedback given\" />\n              )}\n            </Section>\n          </div>\n        </>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}